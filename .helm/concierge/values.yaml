# Default values for concierge.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global Docker image registry
## Please, note that this will override the image registry for all the images, including dependencies, configured to use the global value
##
global:
  imageRegistry: ""

replicaCount: 1

image:
  repository: phanoix/concierge
  tag: latest
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  clusterIP: ""
  port: 8000

url: http://concierge.local/
ingress:
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/rewrite-target: /
  path: /
  tls:
    enabled: true

# if cert-manager won't automatically create a certificate object, set this to true
create_cert: false

resources: {}
  # If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 100

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## Data Persistent Volume Storage Class
  ##
  storageClass: "azurefile"
  size: 10Gi

env:
  debug: "True"
  allowed_hosts: "*"
  secret:

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3
  successThreshold: 1



##
## External or separately deployed database configuration
##
externalDatabase:
  ## Database url if using a separately hosted / external db
  url: 

##
## postgres chart configuration
##
postgres:
  ## Whether to deploy a postgres server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: true

  ## Create a database and a database user
  ##
  db:
    name: concierge
    user: concierge
    ## If the password is not specified, postgres will generates a random password
    password:
    url:

  image:
    repository: postgres
    tag: 11
    pullPolicy: IfNotPresent

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## postgres data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    size: 8Gi

  nodeSelector: {}

  tolerations: []

  affinity: {}
